include gro
set ("dt", 0.1);
set ("population_max", 8100);
set_theme ( dark_theme << [ signals := { { 0, 0/255, 0/255 }, { 0, 0/255, 213/255 },{ 0/255, 0/255, 0/255 } } ] );
//set_theme ( bright_theme << [ signals := { { 1, 0/255, 255/255 }, { 0, 0/255, 213/255 },{ 0/255, 0/255, 0/255 } } ] );
simnum := 1;
timegap1 := 4;//For image tracking;
timegap2 := 20;//For position tracking;
timegap3 := 20;//For concentration tracking;
data1:={};
data2:={};
posdata1:={};
posdata2:={};
s1 := 0; // position time tracker
s2 := 0; // concentration time tracker

R := 40; // grid unit.
d := 40; // range for input the substrate
s0 := 12; // substrate conc.
n0 := 76; // limiting resource conc.

set ( "signal_grid_width", d*R );
set ( "signal_grid_height", d*R );
set ( "signal_element_size", R );
set("signals", 1.0);
set("signals_draw", 1.0);
S := signal ( 2.0, 0 );// define substrate
I := signal ( 2.0, 0 );// define intermediates
P := signal ( 2.0, 0 );// define product
N := signal ( 2.0, 0 );// define another limited resource.

r := 25*d/R;
foreach i in cross(range r)(range r) do {
    set_signal ( S, i[0]*R, i[1]*R, s0 ),
	set_signal ( S, -i[0]*R, i[1]*R, s0 ),
	set_signal ( S, i[0]*R, -i[1]*R, s0 ),
	set_signal ( S, -i[0]*R, -i[1]*R, s0 ),
} end;// make the substrate evenly distributed in the range.

r := 25*d/R;
foreach i in cross(range r)(range r) do {
    set_signal ( N, i[0]*R, i[1]*R, n0 ),
	set_signal ( N, -i[0]*R, i[1]*R, n0 ),
	set_signal ( N, i[0]*R, -i[1]*R, n0 ),
	set_signal ( N, -i[0]*R, -i[1]*R, n0 ),
} end;// make the limiting resource evenly distributed in the range.


k1 := 46;
E1 := 0.02;
K1 := 0.0096;
k2 := 200;
E2 := 0.02;
K2 := 0.015;
kg1 := 0.32;
kg2 := 0.32;
Y := 1;
c1 := 1;
c2 := 0.982;
Kg := 0.02;
rs := 2.63;
ri1 := 0.427;
ri2 := 0.427;
rp1 := 2.51;
rp2 := 2.51;
rn := 2.62;
de := 0.0003;
sita := 1;

kn :=1.0;
Kn :=0.04;

fun fact n .
  if n > 0
    then n
    else 0
  end;
  //make varas over 0
  
fun diff1 n .
  if n > 0
    then n
    else 0
  end;
  //if out>in, absorb
  
fun diff2 n .
  if n < 0
    then -n
    else 0
  end;
  //if out<in, emit

fun output x y z s n m .
    if s < n
    then fprint(m, s, ", ", x, ", ", y, ", ", z, "\n")
    else print (s)
  end;

fun react s n.
if s < n
    then s
    else n
  end;

Dcell := 100; 
program DETOXIFIER() := {
  as := 0;
  as1 := 0;
  as2 := 0;
  ap := 0;
  ap1 := 0;
  ap2 := 0;
  ir := 0;
  ir1 := 0;
  ir2 := 0;
  
  an := 0;
  an1 := 0;
  an2 := 0;
  
  Nout1 :=0;
  Nin1 :=0;
  
  Sout1 := 0;
  Sin1 := 0;
  Iin1 := 0;
  Pin1 := 0;
  react1 := 0;
  mu1 := 0;
  Iout1 :=0;
  Pout1 :=0;
  rfp :=0;
  g := geometry();
  
  true : {
    rfp := volume * 100,
	
	Nout1 := get_signal(N),
    an := rn*(Nout1-Nin1)*dt,
	an1 := diff1 an,
	an1 :=react an1 Nout1,
    absorb_signal ( N, an1 ),
	Nin1 := Nin1 + (an1),
	an2 := diff2 an,
	an2 :=react an2 Nin1,
    emit_signal ( N, an2 ),
	Nin1 := Nin1 - (an2),
	Nin1 := fact Nin1,
	
    Sout1 := get_signal(S),
    as := rs*(Sout1-Sin1)*dt,
	as1 := diff1 as,
	as1 :=react as1 Sout1,
    absorb_signal ( S, as1 ),
	Sin1 := Sin1 + (as1),
	as2 := diff2 as,
	as2 :=react as2 Sin1,
    emit_signal ( S, as2 ),
	Sin1 := Sin1 - (as2),
	Sin1 := fact Sin1,
	
	react1 := k1*E1*Sin1*dt/(K1+Sin1),
	react1 := react react1 Sin1, 
	Iin1 := Iin1 + react1,
	Sin1 := Sin1 - react1,
	//Sin1 := fact Sin1,
	
	Iout1 := get_signal(I),
	ir := ri1*(Iout1-Iin1)*dt,
	ir1 := diff1 ir,
	ir1 :=react ir1 Iout1,
	absorb_signal ( I, ir1 ),
	Iin1 := Iin1 + (ir1),
	ir2 := diff2 ir,
	ir2 :=react ir2 Iin1,
	emit_signal ( I, ir2 ),
	Iin1 := Iin1 - (ir2),
	Iin1 := fact Iin1,
	//print(Sin1),
	
	Pout1 :=get_signal(P),
	ap := rp1*(Pout1-Pin1)*dt,	
	ap1 := diff1 ap,
	ap1 :=react ap1 Pout1,
	absorb_signal ( P, ap1 ),
	Pin1 := Pin1 + (ap1),
	ap2 := react ap2 Pin1,
	emit_signal ( P, ap2 ),
	Pin1 := Pin1 - (ap2),
	Pin1 := fact Pin1,
	//print(Pin1),
	//data1 :={Sout1,Sin1,Iout1,Iin1,Pout1,Pin1,mu1}@data1,
	mu1 := ((kg1 * Pin1) / ( Kg + Pin1 ))*((kn * Nin1) / ( Kn + Nin1 ))*Y*(1/(1+sita*Sin1))-de,
	set ( "ecoli_growth_rate", mu1),
	Pin1 := Pin1 -((kg1*Pin1*dt) / ( Kg + Pin1 )),
	Pin1 := fact Pin1,
	Nin1 := Nin1-((kn * Nin1) / ( Kn + Nin1 )),
	Nin1 := fact Nin1,
  };
  s1 >= timegap2-dt:{
  g := geometry(),
  posdata1 := { id, g.x, g.y, g.theta } @ posdata1
  };
  s2 >= timegap3-dt:{data1 :={id,Sout1,Sin1,Iout1,Iin1,Pout1,Pin1,Nout1,Nin1,mu1}@data1};
  daughter : { Dcell := Dcell + 1 }; 
  volume < 0.5 : { die() }
  
};

Ecell := 100;  
program EMBEZZLER() := {
  as := 0;
  as1 := 0;
  as2 := 0;
  ai := 0;
  ai1 := 0;
  ai2 := 0;
  pr := 0;
  pr1 := 0;
  pr2 := 0;
  
  an := 0;
  an1 := 0;
  an2 := 0;
  
  Nout2 :=0;
  Nin2 :=0;
  
  Sout2 := 0;
  Sin2 := 0;
  Iin2 := 0;
  Pin2 := 0;
  Iout2 := 0;
  Pout2 := 0;
  react2 := 0;
  reactg := 0;
  mu2 :=0;
  gfp :=0;
  g := geometry();
  
  true : {
    gfp := volume * 100,
	
	Nout2 := get_signal(N),
    an := rn*(Nout2-Nin2)*dt,
	an1 := diff1 an,
	an1 :=react an1 Nout2,
    absorb_signal ( N, an1 ),
	Nin2 := Nin2 + (an1),
	an2 := diff2 an,
	an2 :=react an2 Nin2,
    emit_signal ( N, an2 ),
	Nin2 := Nin2 - (an2),
	Nin2 := fact Nin2,
	
    Sout2 := get_signal(S),
    as := rs*(Sout2-Sin2)*dt,
	as1 := diff1 as,
	as1 :=react as1 Sout2,
    absorb_signal ( S, as1 ),
	Sin2 := Sin2 + (as1),
	as2 := diff2 as,
	as2 :=react as2 Sout2,
    emit_signal ( S, as2 ),
	Sin2 := Sin2 - (as2),
	Sin2 := fact Sin2,
	
    Iout2 := get_signal(I),
	ai := ri2*(Iout2-Iin2)*dt,
	ai1 := diff1 ai,
	ai1 :=react ai1 Iout2,
    absorb_signal ( I, ai1 ),
	Iin2 := Iin2 + (ai1),
	ai2 := diff2 ai,
	ai2 :=react ai2 Iin2,
    emit_signal ( I, ai2 ),
	Iin2 := Iin2 - (ai2),
	Iin2 := fact Iin2,
	
	react2 := k2*E2*Iin2*dt/(K2+Iin2),
	react2 := react react2 Iin2, 
	Pin2 := Pin2 + 2*react2,
	Iin2 := Iin2 - react2,
	//Iin2 := fact Iin2,
	//print(Iin2),
	
	//data2 :={ceil(Sout2),Sin2,Iout2,Iin2,Pout2,Pin2,mu2}@data2,
	mu2 := ((kg2 * Pin2)/(Kg + Pin2))*((kn * Nin2) / ( Kn + Nin2 ))*Y*c2*(1/(1+sita*Sin2))-de,
	set ( "ecoli_growth_rate", mu2),
	Pin2 := Pin2 - ((kg2*Pin2*dt) / (Kg + Pin2)),
	Pin2 := fact Pin2,
	Nin2 := Nin2-((kn * Nin2) / ( Kn + Nin2 )),
	Nin2 := fact Nin2,
	
	//print ( id, " 2 ", Pin2),
	
	Pout2 := get_signal(P),
	pr := rp2*(Pout2-Pin2)*dt,	
	pr1 := diff1 pr,
	pr1 :=react pr1 Pout2,
	absorb_signal ( P, pr1 ),
	Pin2 := Pin2 + (pr1),
	pr2 := diff2 pr,
	pr2 :=react pr2 Pin2,
	emit_signal ( P, pr2 ),
	Pin2 := Pin2 - (pr2),
	Pin2 := fact Pin2,
	//print(Sin2),
    
  };
   s1 >= timegap2-dt:{
   g := geometry(),
   posdata2 := { id, g.x, g.y, g.theta } @ posdata2
   };
   s2 >= timegap3-dt:{data2 :={id,Sout2,Sin2,Iout2,Iin2,Pout2,Pin2,Nout2,Nin2,mu2}@data2};
   daughter : { Ecell := Ecell + 1 }; 
   volume < 0.5 : { die() };

};

t :=0;
fp1 := "d:/Reasearch/gro/MDOL/simdata/images"<>tostring(simnum)<>"/";
fpn := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"cellnumber"<>tostring(simnum)<>".csv", "w" );
fpd := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"dataD"<>tostring(simnum)<>".txt", "w" );
fpe := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"dataE"<>tostring(simnum)<>".txt", "w" );
fpD := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"DET"<>tostring(simnum)<>".csv", "w" );
fpE := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"Emb"<>tostring(simnum)<>".csv", "w" );
l :=0;
program main() :=
{
c_ecolis(Dcell, 0, 0, 200, {},program DETOXIFIER());
c_ecolis(Ecell, 0, 0, 200, {},program EMBEZZLER());
    t := 0; // framerate time tracker
	s :=0; // cellnumber time tracker
	st := 0;//
	n :=0;
    true : {
        t := t + dt,
        s := s + dt,
		s1 :=s1 + dt,
		s2 :=s2 + dt,
		st := st + dt,
    }
	
   s > 0.1 : {
   fprint ( fpn, st, ", ", Dcell, ", ", Ecell,"\n"),
   s := 0,
  }
  
  t > timegap1 : {
        snapshot ( fp1 <> "expression" <> if n <10 then "0" else "" end <> tostring(n) <> ".tif" ),
        n := n + 1,
        t := 0,
  }
	

  s1 > timegap2 : {
   fprint ( fpD, "{" <> tostring(time()) <> "," <> tostring(posdata1) <> "},\n"),
   fprint ( fpE, "{" <> tostring(time()) <> "," <> tostring(posdata2) <> "},\n"),
   s1 := 0,
   posdata1 :={},
   posdata2 :={}
  }
  s2 > timegap3 : {
   fprint ( fpd, "{" <> tostring(time()) <> "," <> tostring(data1) <> "},\n"),
   fprint ( fpe, "{" <> tostring(time()) <> "," <> tostring(data2) <> "},\n"),
   s2 := 0,
   data1 :={},
   data2 :={}
  }

	
	st> 100:{    
	    snapshot ( fp1 <> "expression-end.tif" ),
    }
	
	st >= 150000 : {
    stop()
  }
};
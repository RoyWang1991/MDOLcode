include gro
set ("dt", 0.1);
set ("population_max", 8100);
//set_theme ( bright_theme << [ signals := { { 1, 94/255, 72/255 },  { 0/255, 0/255, 213/255 },{ 0/255, 0/255, 0/255 } } ] );
set_theme ( dark_theme << [ signals := { { 0, 0/255, 0/255 }, { 0, 0/255, 213/255 },{ 0/255, 0/255, 0/255 } } ] );
simnum:= 8;
timegap1 := 2;//For image tracking;
timegap2 := 10;//For position tracking;
timegap3 := 10;//For concentration tracking;
data1:={};
data2:={};
posdata1:={};
posdata2:={};
s1 := 0; // position time tracker
s2 := 0; // concentration time tracker

R := 40; // grid unit.
d := 40; // range for input the substrate
s0 := 30; // substrate conc.
set ( "signal_grid_width", d*R );
set ( "signal_grid_height", d*R );
set ( "signal_element_size", R );
set("signals", 1.0);
set("signals_draw", 1.0);
S := signal ( 2.0, 0.0 );// define substrate

r := 25*d/R;
foreach i in cross(range r)(range r) do {
    set_signal ( S, i[0]*R, i[1]*R, s0 ),
	set_signal ( S, -i[0]*R, i[1]*R, s0 ),
	set_signal ( S, i[0]*R, -i[1]*R, s0 ),
	set_signal ( S, -i[0]*R, -i[1]*R, s0 ),
} end;// make the substrate evenly distributed in the range.

fun fact n .
  if n > 0
    then n
    else 0
  end;
  //make varas over 0
  
fun diff1 n .
  if n > 0
    then n
    else 0
  end;
  //if out>in, absorb
  
fun diff2 n .
  if n < 0
    then -n
    else 0
  end;
  //if out<in, emit
fun react s n.
if s < n
    then s
    else n
  end;


kg := 0.32;
Kg := 0.02;
rs := 2.51;
Y := 0.1;
c1 := 1;
c2 := 1;
de := 0.0003;

Dcell :=100;
program DETOXIFIER() := {
  as := 0;
  as1 := 0;
  as2 := 0;
  Sout1 := 0 ;
  Sin1 := 0 ;
  rfp := 0;
  mu1 :=0;
  g := geometry();
  true : {
    rfp := volume * 100,
    Sout1 := get_signal(S),
    as := rs*(Sout1-Sin1)*dt,
	as1 := diff1 as,
	as1 :=react as1 Sout1,
    absorb_signal ( S, as1 ),
	Sin1 := Sin1 + (as1),
	as2 := diff2 as,
	as2 :=react as2 Sin1,
    emit_signal ( S, as2 ),
	Sin1 := Sin1 - (as2),
	Sin1 := fact Sin1,
	
	mu1 := (((kg * Sin1) / ( Kg + Sin1 ))*Y*c1)-de,
	set ( "ecoli_growth_rate", mu1 ),
	Sin1 := Sin1 -((kg*Sin1*dt) / ( Kg + Sin1 )),
	Sin1 := fact Sin1
	//print(Sout1)
  };
  s1 >= timegap2-dt:{
  g := geometry(),
  posdata1 := { id, g.x, g.y, g.theta } @ posdata1
  };
  s2 >= timegap3-dt:{data1 :={id,Sout1,Sin1,mu1}@data1};
  daughter : { Dcell := Dcell + 1 }; 
  volume < 0.1 : { die() }
  
};

Ecell :=100;
program EMBEZZLER() := {
  as := 0;
  as1 := 0;
  as2 := 0;
  Sout2 := 0 ;
  Sin2 := 0 ;
  gfp := 0;
  mu2 :=0;
  g := geometry();
  true : {
    gfp := volume * 100,
    Sout2 := get_signal(S),
    as := rs*(Sout2-Sin2)*dt,
	as1 := diff1 as,
	as1 :=react as1 Sout2,
    absorb_signal ( S, as1 ),
	Sin2 := Sin2 + (as1),
	as2 := diff2 as,
	as2 :=react as2 Sout2,
    emit_signal ( S, as2 ),
	Sin2 := Sin2 - (as2),
	Sin2 := fact Sin2,
   
	mu2 := (((kg * Sin2) / ( Kg + Sin2 ))*Y*c2)-de,
	set ( "ecoli_growth_rate", mu2 ),
	Sin2 := Sin2 -((kg*Sin2*dt) / ( Kg + Sin2 )),
	Sin2 := fact Sin2
  };
   s1 >= timegap2-dt:{
   g := geometry(),
   posdata2 := { id, g.x, g.y, g.theta } @ posdata2
   };
   s2 >= timegap3-dt:{data2 :={id,Sout2,Sin2,mu2}@data2};
   daughter : { Ecell := Ecell + 1 }; 
   volume < 0.1 : { die() }
};

t :=0;
fp1 := "d:/Reasearch/gro/MDOL/simdata/images"<>tostring(simnum)<>"/";
fpn := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"cellnumber"<>tostring(simnum)<>".csv", "w" );
fpd := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"dataD"<>tostring(simnum)<>".txt", "w" );
fpe := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"dataE"<>tostring(simnum)<>".txt", "w" );
fpD := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"DET"<>tostring(simnum)<>".csv", "w" );
fpE := fopen ( "d:/Reasearch/gro/MDOL/simdata/"<>"Emb"<>tostring(simnum)<>".csv", "w" );
l :=0;
program main() :=
{
c_ecolis(Dcell, 0, 0, 200, {},program DETOXIFIER());
c_ecolis(Ecell, 0, 0, 200, {},program EMBEZZLER());
    t := 0; // framerate time tracker
	s :=0; // cellnumber time tracker
	st := 0;//
	n :=0;
    true : {
        t := t + dt,
        s := s + dt,
		s1 :=s1 + dt,
		s2 :=s2 + dt,
		st := st + dt,
    }
	
   s > 0.1 : {
   fprint ( fpn, st, ", ", Dcell, ", ", Ecell,"\n"),
   s := 0,
  }
  
  t > timegap1 : {
        snapshot ( fp1 <> "expression" <> if n <10 then "0" else "" end <> tostring(n) <> ".tif" ),
        n := n + 1,
        t := 0,
  }
	

  s1 > timegap2 : {
   fprint ( fpD, "{" <> tostring(time()) <> "," <> tostring(posdata1) <> "},\n"),
   fprint ( fpE, "{" <> tostring(time()) <> "," <> tostring(posdata2) <> "},\n"),
   s1 := 0,
   posdata1 :={},
   posdata2 :={}
  }
  s2 > timegap3 : {
   fprint ( fpd, "{" <> tostring(time()) <> "," <> tostring(data1) <> "},\n"),
   fprint ( fpe, "{" <> tostring(time()) <> "," <> tostring(data2) <> "},\n"),
   s2 := 0,
   data1 :={},
   data2 :={}
  }

	
	st> 100:{    
	    snapshot ( fp1 <> "expression-end.tif" ),
    }
	
	st >= 150000 : {
    stop()
  }
};
